#include "stdafx.h"
#include "RenderUtils.h"
#include <d3d9.h>

typedef struct tagPixelFormatD3DXAndFourCC
{
	DWORD pfFourCC;
	D3DFORMAT d3d9Format;
}PFDF;

PFDF PFDFTable[] = {
	{ PIXEL_FORMAT_RGB24, D3DFMT_X8R8G8B8 },
	{ PIXEL_FORMAT_RGB32, D3DFMT_A8R8G8B8 },
	{ PIXEL_FORMAT_ARGB, D3DFMT_A8R8G8B8 },
	{ PIXEL_FORMAT_RGB565, D3DFMT_R5G6B5 },
	{ PIXEL_FORMAT_RGB555, D3DFMT_X1R5G5B5 },
	{ PIXEL_FORMAT_UYVY, (D3DFORMAT)PIXEL_FORMAT_UYVY },
	{ PIXEL_FORMAT_YUY2, D3DFMT_YUY2 },
	{ PIXEL_FORMAT_UYVY, D3DFMT_UYVY },
	{ PIXEL_FORMAT_I420, (D3DFORMAT)PIXEL_FORMAT_I420 },
	{ PIXEL_FORMAT_NV12, (D3DFORMAT)PIXEL_FORMAT_NV12 },
	{ PIXEL_FORMAT_YV12, (D3DFORMAT)PIXEL_FORMAT_YV12 }
};

const COMERROR d3d9ErrorList[] = {
	COMERROR2STR(D3D_OK),
	COMERROR2STR(D3DERR_WRONGTEXTUREFORMAT),
	COMERROR2STR(D3DERR_UNSUPPORTEDCOLOROPERATION),
	COMERROR2STR(D3DERR_UNSUPPORTEDCOLORARG),
	COMERROR2STR(D3DERR_UNSUPPORTEDALPHAOPERATION),
	COMERROR2STR(D3DERR_UNSUPPORTEDALPHAARG),
	COMERROR2STR(D3DERR_TOOMANYOPERATIONS),
	COMERROR2STR(D3DERR_CONFLICTINGTEXTUREFILTER),
	COMERROR2STR(D3DERR_UNSUPPORTEDFACTORVALUE),
	COMERROR2STR(D3DERR_CONFLICTINGRENDERSTATE),
	COMERROR2STR(D3DERR_UNSUPPORTEDTEXTUREFILTER),
	COMERROR2STR(D3DERR_CONFLICTINGTEXTUREPALETTE),
	COMERROR2STR(D3DERR_DRIVERINTERNALERROR),
	COMERROR2STR(D3DERR_NOTFOUND),
	COMERROR2STR(D3DERR_MOREDATA),
	COMERROR2STR(D3DERR_DEVICELOST),
	COMERROR2STR(D3DERR_DEVICENOTRESET),
	COMERROR2STR(D3DERR_NOTAVAILABLE),
	COMERROR2STR(D3DERR_OUTOFVIDEOMEMORY),
	COMERROR2STR(D3DERR_INVALIDDEVICE),
	COMERROR2STR(D3DERR_INVALIDCALL),
	COMERROR2STR(D3DERR_DRIVERINVALIDCALL),
	COMERROR2STR(D3DERR_WASSTILLDRAWING),
	COMERROR2STR(D3DOK_NOAUTOGEN),
	COMERROR2STR(D3DERR_DEVICEREMOVED),
	COMERROR2STR(S_NOT_RESIDENT),
	COMERROR2STR(S_RESIDENT_IN_SHARED_MEMORY),
	COMERROR2STR(S_PRESENT_MODE_CHANGED),
	COMERROR2STR(S_PRESENT_OCCLUDED),
	COMERROR2STR(D3DERR_DEVICEHUNG),
	COMERROR2STR(D3DERR_UNSUPPORTEDOVERLAY),
	COMERROR2STR(D3DERR_UNSUPPORTEDOVERLAYFORMAT),
	COMERROR2STR(D3DERR_CANNOTPROTECTCONTENT),
	COMERROR2STR(D3DERR_UNSUPPORTEDCRYPTO),
	COMERROR2STR(D3DERR_PRESENT_STATISTICS_DISJOINT)
};

const TCHAR* GetD3D9ErrorString(HRESULT hr)
{
	const COMERROR *prr = &d3d9ErrorList[D3D_OK];

	if (FAILED(hr)){
		for (int i = 0; i < ARRAYSIZE(d3d9ErrorList); i++){
			if (d3d9ErrorList[i].hr == hr){
				prr = &d3d9ErrorList[i];
			}
		}
	}

	return prr->desc;
}

D3DFORMAT GetD3D9PixelFmtByFourCC(DWORD pfFourCC)
{
	D3DFORMAT fp = D3DFMT_UNKNOWN;
	for (int i = 0; i < ARRAYSIZE(PFDFTable); i++){
		if (PFDFTable[i].pfFourCC == pfFourCC){
			fp = PFDFTable[i].d3d9Format;
		}
	}
	return fp;
}

DWORD GetFourCCByD3D9PixelFmt(D3DFORMAT format)
{
	DWORD fourCC = 0;
	for (int i = 0; i < ARRAYSIZE(PFDFTable); i++){
		if (PFDFTable[i].d3d9Format == format){
			fourCC = PFDFTable[i].pfFourCC;
		}
	}
	return fourCC;
}