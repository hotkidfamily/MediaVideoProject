#include "stdafx.h"
#include "RenderUtils.h"
#include "iRenderCommon.h"
#include <d3d9.h>
#include <ddraw.h>

typedef struct tagPixelFormatD3DXAndFourCC
{
	DWORD pfFourCC;
	D3DFORMAT d3d9Format;
}PFDF;

const COMERROR ddrawErrorList[] = {
	COMERROR2STR(DD_OK),
	COMERROR2STR(DDERR_ALREADYINITIALIZED),
	COMERROR2STR(DDERR_CANNOTATTACHSURFACE),
	COMERROR2STR(DDERR_CANNOTDETACHSURFACE),
	COMERROR2STR(DDERR_CURRENTLYNOTAVAIL),
	COMERROR2STR(DDERR_EXCEPTION),
	COMERROR2STR(DDERR_GENERIC),
	COMERROR2STR(DDERR_HEIGHTALIGN),
	COMERROR2STR(DDERR_INCOMPATIBLEPRIMARY),
	COMERROR2STR(DDERR_INVALIDCAPS),
	COMERROR2STR(DDERR_INVALIDCLIPLIST),
	COMERROR2STR(DDERR_INVALIDMODE),
	COMERROR2STR(DDERR_INVALIDOBJECT),
	COMERROR2STR(DDERR_INVALIDPARAMS),
	COMERROR2STR(DDERR_INVALIDPIXELFORMAT),
	COMERROR2STR(DDERR_INVALIDRECT),
	COMERROR2STR(DDERR_LOCKEDSURFACES),
	COMERROR2STR(DDERR_NO3D),
	COMERROR2STR(DDERR_NOALPHAHW),
	COMERROR2STR(DDERR_NOSTEREOHARDWARE),
	COMERROR2STR(DDERR_NOSURFACELEFT),
	COMERROR2STR(DDERR_NOCLIPLIST),
	COMERROR2STR(DDERR_NOCOLORCONVHW),
	COMERROR2STR(DDERR_NOCOOPERATIVELEVELSET),
	COMERROR2STR(DDERR_NOCOLORKEY),
	COMERROR2STR(DDERR_NOCOLORKEYHW),
	COMERROR2STR(DDERR_NODIRECTDRAWSUPPORT),
	COMERROR2STR(DDERR_NOEXCLUSIVEMODE),
	COMERROR2STR(DDERR_NOFLIPHW),
	COMERROR2STR(DDERR_NOGDI),
	COMERROR2STR(DDERR_NOMIRRORHW),
	COMERROR2STR(DDERR_NOTFOUND),
	COMERROR2STR(DDERR_NOOVERLAYHW),
	COMERROR2STR(DDERR_OVERLAPPINGRECTS),
	COMERROR2STR(DDERR_NORASTEROPHW),
	COMERROR2STR(DDERR_NOROTATIONHW),
	COMERROR2STR(DDERR_NOSTRETCHHW),
	COMERROR2STR(DDERR_NOT4BITCOLOR),
	COMERROR2STR(DDERR_NOT4BITCOLORINDEX),
	COMERROR2STR(DDERR_NOT8BITCOLOR),
	COMERROR2STR(DDERR_NOTEXTUREHW),
	COMERROR2STR(DDERR_NOVSYNCHW),
	COMERROR2STR(DDERR_NOZBUFFERHW),
	COMERROR2STR(DDERR_NOZOVERLAYHW),
	COMERROR2STR(DDERR_OUTOFCAPS),
	COMERROR2STR(DDERR_OUTOFMEMORY),
	COMERROR2STR(DDERR_OUTOFVIDEOMEMORY),
	COMERROR2STR(DDERR_OVERLAYCANTCLIP),
	COMERROR2STR(DDERR_OVERLAYCOLORKEYONLYONEACTIVE),
	COMERROR2STR(DDERR_PALETTEBUSY),
	COMERROR2STR(DDERR_COLORKEYNOTSET),
	COMERROR2STR(DDERR_SURFACEALREADYATTACHED),
	COMERROR2STR(DDERR_SURFACEALREADYDEPENDENT),
	COMERROR2STR(DDERR_SURFACEBUSY),
	COMERROR2STR(DDERR_CANTLOCKSURFACE),
	COMERROR2STR(DDERR_SURFACEISOBSCURED),
	COMERROR2STR(DDERR_SURFACELOST),
	COMERROR2STR(DDERR_SURFACENOTATTACHED),
	COMERROR2STR(DDERR_TOOBIGHEIGHT),
	COMERROR2STR(DDERR_TOOBIGSIZE),
	COMERROR2STR(DDERR_TOOBIGWIDTH),
	COMERROR2STR(DDERR_UNSUPPORTED),
	COMERROR2STR(DDERR_UNSUPPORTEDFORMAT),
	COMERROR2STR(DDERR_UNSUPPORTEDMASK),
	COMERROR2STR(DDERR_INVALIDSTREAM),
	COMERROR2STR(DDERR_VERTICALBLANKINPROGRESS),
	COMERROR2STR(DDERR_WASSTILLDRAWING),
	COMERROR2STR(DDERR_DDSCAPSCOMPLEXREQUIRED),
	COMERROR2STR(DDERR_XALIGN),
	COMERROR2STR(DDERR_INVALIDDIRECTDRAWGUID),
	COMERROR2STR(DDERR_DIRECTDRAWALREADYCREATED),
	COMERROR2STR(DDERR_NODIRECTDRAWHW),
	COMERROR2STR(DDERR_PRIMARYSURFACEALREADYEXISTS),
	COMERROR2STR(DDERR_NOEMULATION),
	COMERROR2STR(DDERR_REGIONTOOSMALL),
	COMERROR2STR(DDERR_CLIPPERISUSINGHWND),
	COMERROR2STR(DDERR_NOCLIPPERATTACHED),
	COMERROR2STR(DDERR_NOHWND),
	COMERROR2STR(DDERR_HWNDSUBCLASSED),
	COMERROR2STR(DDERR_HWNDALREADYSET),
	COMERROR2STR(DDERR_NOPALETTEATTACHED),
	COMERROR2STR(DDERR_NOPALETTEHW),
	COMERROR2STR(DDERR_BLTFASTCANTCLIP),
	COMERROR2STR(DDERR_NOBLTHW),
	COMERROR2STR(DDERR_NODDROPSHW),
	COMERROR2STR(DDERR_OVERLAYNOTVISIBLE),
	COMERROR2STR(DDERR_NOOVERLAYDEST),
	COMERROR2STR(DDERR_INVALIDPOSITION),
	COMERROR2STR(DDERR_NOTAOVERLAYSURFACE),
	COMERROR2STR(DDERR_EXCLUSIVEMODEALREADYSET),
	COMERROR2STR(DDERR_NOTFLIPPABLE),
	COMERROR2STR(DDERR_CANTDUPLICATE),
	COMERROR2STR(DDERR_NOTLOCKED),
	COMERROR2STR(DDERR_CANTCREATEDC),
	COMERROR2STR(DDERR_NODC),
	COMERROR2STR(DDERR_WRONGMODE),
	COMERROR2STR(DDERR_IMPLICITLYCREATED),
	COMERROR2STR(DDERR_NOTPALETTIZED),
	COMERROR2STR(DDERR_UNSUPPORTEDMODE),
	COMERROR2STR(DDERR_NOMIPMAPHW),
	COMERROR2STR(DDERR_INVALIDSURFACETYPE),
	COMERROR2STR(DDERR_NOOPTIMIZEHW),
	COMERROR2STR(DDERR_NOTLOADED),
	COMERROR2STR(DDERR_NOFOCUSWINDOW),
	COMERROR2STR(DDERR_NOTONMIPMAPSUBLEVEL),
	COMERROR2STR(DDERR_DCALREADYCREATED),
	COMERROR2STR(DDERR_NONONLOCALVIDMEM),
	COMERROR2STR(DDERR_CANTPAGELOCK),
	COMERROR2STR(DDERR_CANTPAGEUNLOCK),
	COMERROR2STR(DDERR_NOTPAGELOCKED),
	COMERROR2STR(DDERR_MOREDATA),
	COMERROR2STR(DDERR_EXPIRED),
	COMERROR2STR(DDERR_TESTFINISHED),
	COMERROR2STR(DDERR_NEWMODE),
	COMERROR2STR(DDERR_D3DNOTINITIALIZED),
	COMERROR2STR(DDERR_VIDEONOTACTIVE),
	COMERROR2STR(DDERR_NOMONITORINFORMATION),
	COMERROR2STR(DDERR_NODRIVERSUPPORT),
	COMERROR2STR(DDERR_DEVICEDOESNTOWNSURFACE),
	COMERROR2STR(DDERR_NOTINITIALIZED)
};

const COMERROR d3d9ErrorList[] = {
	COMERROR2STR(D3D_OK),
	COMERROR2STR(D3DERR_WRONGTEXTUREFORMAT),
	COMERROR2STR(D3DERR_UNSUPPORTEDCOLOROPERATION),
	COMERROR2STR(D3DERR_UNSUPPORTEDCOLORARG),
	COMERROR2STR(D3DERR_UNSUPPORTEDALPHAOPERATION),
	COMERROR2STR(D3DERR_UNSUPPORTEDALPHAARG),
	COMERROR2STR(D3DERR_TOOMANYOPERATIONS),
	COMERROR2STR(D3DERR_CONFLICTINGTEXTUREFILTER),
	COMERROR2STR(D3DERR_UNSUPPORTEDFACTORVALUE),
	COMERROR2STR(D3DERR_CONFLICTINGRENDERSTATE),
	COMERROR2STR(D3DERR_UNSUPPORTEDTEXTUREFILTER),
	COMERROR2STR(D3DERR_CONFLICTINGTEXTUREPALETTE),
	COMERROR2STR(D3DERR_DRIVERINTERNALERROR),
	COMERROR2STR(D3DERR_NOTFOUND),
	COMERROR2STR(D3DERR_MOREDATA),
	COMERROR2STR(D3DERR_DEVICELOST),
	COMERROR2STR(D3DERR_DEVICENOTRESET),
	COMERROR2STR(D3DERR_NOTAVAILABLE),
	COMERROR2STR(D3DERR_OUTOFVIDEOMEMORY),
	COMERROR2STR(D3DERR_INVALIDDEVICE),
	COMERROR2STR(D3DERR_INVALIDCALL),
	COMERROR2STR(D3DERR_DRIVERINVALIDCALL),
	COMERROR2STR(D3DERR_WASSTILLDRAWING),
	COMERROR2STR(D3DOK_NOAUTOGEN),
	COMERROR2STR(D3DERR_DEVICEREMOVED),
	COMERROR2STR(S_NOT_RESIDENT),
	COMERROR2STR(S_RESIDENT_IN_SHARED_MEMORY),
	COMERROR2STR(S_PRESENT_MODE_CHANGED),
	COMERROR2STR(S_PRESENT_OCCLUDED),
	COMERROR2STR(D3DERR_DEVICEHUNG),
	COMERROR2STR(D3DERR_UNSUPPORTEDOVERLAY),
	COMERROR2STR(D3DERR_UNSUPPORTEDOVERLAYFORMAT),
	COMERROR2STR(D3DERR_CANNOTPROTECTCONTENT),
	COMERROR2STR(D3DERR_UNSUPPORTEDCRYPTO),
	COMERROR2STR(D3DERR_PRESENT_STATISTICS_DISJOINT)
};

PFDF PFDFTable[] = {
		{ PIXEL_FORMAT_RGB24, D3DFMT_R8G8B8 },
		{ PIXEL_FORMAT_RGB32, D3DFMT_X8R8G8B8 },
		{ PIXEL_FORMAT_ARGB, D3DFMT_A8R8G8B8 },
		{ PIXEL_FORMAT_RGB565, D3DFMT_R5G6B5 },
		{ PIXEL_FORMAT_RGB555, D3DFMT_X1R5G5B5 },
		{ PIXEL_FORMAT_YUY2, D3DFMT_YUY2 },
		{ PIXEL_FORMAT_UYVY, D3DFMT_UYVY },
		{ PIXEL_FORMAT_I420, (D3DFORMAT)PIXEL_FORMAT_I420 },
		{ PIXEL_FORMAT_NV12, (D3DFORMAT)PIXEL_FORMAT_NV12 },
		{ PIXEL_FORMAT_YV12, (D3DFORMAT)PIXEL_FORMAT_YV12 }
};

const TCHAR* GetD3D9ErrorString(HRESULT hr)
{
	const COMERROR *prr = &d3d9ErrorList[D3D_OK];

	if (FAILED(hr)){
		for (int i = 0; i < ARRAYSIZE(d3d9ErrorList); i++){
			if (d3d9ErrorList[i].hr == hr){
				prr = &d3d9ErrorList[i];
			}
		}
	}

	return prr->desc;
}

const TCHAR* GetDDrawErrorString(HRESULT hr)
{
	const COMERROR *prr = &ddrawErrorList[DD_OK];

	if (FAILED(hr)){
		for (int i = 0; i < ARRAYSIZE(ddrawErrorList); i++){
			if (ddrawErrorList[i].hr == hr){
				prr = &ddrawErrorList[i];
			}
		}
	}

	return prr->desc;
}

D3DFORMAT GetD3D9PixelFmtByFourCC(DWORD pfFourCC)
{
	D3DFORMAT fp = D3DFMT_UNKNOWN;
	for (int i = 0; i < ARRAYSIZE(PFDFTable); i++){
		if (PFDFTable[i].pfFourCC == pfFourCC){
			fp = PFDFTable[i].d3d9Format;
		}
	}
	return fp;
}

DWORD GetFourCCByD3D9PixelFmt(D3DFORMAT format)
{
	DWORD fourCC = 0;
	for (int i = 0; i < ARRAYSIZE(PFDFTable); i++){
		if (PFDFTable[i].d3d9Format == format){
			fourCC = PFDFTable[i].pfFourCC;
		}
	}
	return fourCC;
}

DWORD WINAPI CreateRenderThread(void* args)
{
	IRenderThread *pRender = (IRenderThread*)args;
	return pRender->RenderLoop();
}